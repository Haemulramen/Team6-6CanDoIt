#services:
#
#  # Test Server
#  test-server:
#    build:
#      context: .
#      dockerfile: Dockerfile
#      args:
#        MODULE_NAME: test-server
#        MODULE_PATH: application-modules
#    container_name: test-server
#    ports:
#      - "8082:8080"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SERVER_PORT=8080
#      - DB_HOST=mysql          # ← postgres → mysql
#      - DB_PORT=3306           # ← 5432 → 3306
#      - DB_NAME=backend_db
#      - DB_USER=backend_user
#      - DB_PASSWORD=backend_pass
#    depends_on:
#      - mysql
#    restart: unless-stopped
#
#  mysql:
#    image: mysql:8.0           # or 8.4
#    container_name: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: root_pass
#      MYSQL_DATABASE: backend_db
#      MYSQL_USER: backend_user
#      MYSQL_PASSWORD: backend_pass
#    volumes:
#      - mysql-data:/var/lib/mysql
#    ports:
#      - "3306:3306"
#    restart: unless-stopped
#
#volumes:
#  mysql-data:
#    driver: local
version: '3.8'

services:
  # API Server
  api-server:
    build:
      context: .
      dockerfile: application-modules/api-server/Dockerfile
    container_name: api-server
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=backend_db
      - DB_USER=backend_user
      - DB_PASSWORD=backend_pass
#      - REDIS_HOST=redis
#      - REDIS_PORT=6379
    depends_on:
      - mysql
#      - redis
    restart: unless-stopped
    networks:
      - backend-network

  # Batch Server
  batch-server:
    build:
      context: .
      dockerfile: application-modules/batch-server/Dockerfile
    container_name: batch-server
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=backend_db
      - DB_USER=backend_user
      - DB_PASSWORD=backend_pass
#      - REDIS_HOST=redis
#      - REDIS_PORT=6379
      - BATCH_JOB_ENABLED=true
    depends_on:
      - mysql
#      - redis
    restart: unless-stopped
    networks:
      - backend-network

  # Test Server
  test-server:
    build:
      context: .
      dockerfile: application-modules/test-server/Dockerfile
    container_name: test-server
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=backend_db
      - DB_USER=backend_user
      - DB_PASSWORD=backend_pass
    depends_on:
      - mysql
    restart: unless-stopped
    networks:
      - backend-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_pass
      MYSQL_DATABASE: backend_db
      MYSQL_USER: backend_user
      MYSQL_PASSWORD: backend_pass
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    restart: unless-stopped
    networks:
      - backend-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

#  # Redis Cache
#  redis:
#    image: redis:7-alpine
#    container_name: redis
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis-data:/data
#    restart: unless-stopped
#    networks:
#      - backend-network
#    command: redis-server --appendonly yes

networks:
  backend-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
#  redis-data:
#    driver: local